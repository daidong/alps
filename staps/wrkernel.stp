global pidmap;
global firstr, firstw;
global lastr, lastw;

%{
#include <linux/file.h>
#include <net/sock.h>
#include <linux/un.h>
#include <linux/tcp.h>
#ifdef CONFIG_USER_NS
#include <linux/user_namespace.h>
#endif
#ifdef STAPCONF_LINUX_UIDGID_H
#include <linux/uidgid.h>
#endif
%}

function task_file_handle_d_path:string (task:long, fd:long) %{ /* pure */
  struct task_struct *p = (struct task_struct *)((long)THIS->task);
  struct files_struct *files;
  char *page = NULL;
  struct file *filp;
  struct dentry *dentry;
  struct vfsmount *vfsmnt;
  char *path = NULL;

  rcu_read_lock();
  if ((files = kread(&p->files)) &&
      // We need GFP_ATOMIC since we're inside a lock so we
      // can't sleep.
      (page = (char *)__get_free_page(GFP_ATOMIC)) &&
      (filp = fcheck_files(files, THIS->fd))) {

#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,26)
    /* git commit 9d1bc601 */
    path = d_path(&filp->f_path, page, PAGE_SIZE);
#else
    dentry = kread(&filp->f_dentry);
    vfsmnt = kread(&filp->f_vfsmnt);

    if (dentry && vfsmnt) {
      path = d_path(dentry, vfsmnt, page, PAGE_SIZE);
    }
#endif
    if (path && !IS_ERR(path)) {
      snprintf(THIS->__retvalue, MAXSTRINGLEN, "%s", path);
    }
  }
  CATCH_DEREF_FAULT();

  if (page) free_page((unsigned long)page);

  rcu_read_unlock();
%}


function filtout_richfs(execname)
{
  if (execname == "stapio" || execname == "stap" ||execname == "alps") return 1;
}

function filtout_p()
{
  if (pid() in pidmap) return 0;
  else return 1;
}

probe kprocess.create
{
  if (filtout_richfs(execname())) next;
  pidmap[new_pid] = 1;
  
  # new_pid = new process Id; pid() = current process Id,
  printf("%c%d %d %d\n", 97, new_pid, gettimeofday_ms(), pid());
}

probe syscall.exit_group
{
  if (filtout_richfs(execname())) next;
  if (filtout_p()) next;
  delete pidmap[pid()];
  
  printf("%c%d %d\n", 98, pid(), gettimeofday_ms());
}

probe nd_syscall.execve
{
  if (filtout_richfs(execname())) next;
  if (filtout_p()) next;
  env = sprintf("PBS_JOBID=%s;PBS_JOBNAME=%s;PBS_JOBCOOKIE=%s", env_var("PBS_JOBID"), env_var("PBS_JOBNAME"), env_var("PBS_JOBCOOKIE"));
  printf("%c%d %d %s %s %s %s %s\n", 99, pid(), gettimeofday_ms(), execname(), argstr, env, filename, args);
}

probe nd_syscall.execve.return
{
  if (filtout_richfs(execname())) next;
  if (filtout_p()) next;
  env = sprintf("PBS_JOBID=%s;PBS_JOBNAME=%s;PBS_JOBCOOKIE=%s", env_var("PBS_JOBID"), env_var("PBS_JOBNAME"), env_var("PBS_JOBCOOKIE"));
  printf("%c%d %d %s %s\n", 100, pid(), gettimeofday_ms(), retstr, env);
}


#probe kernel.function("do_filp_open")
#probe kernel.function("do_filp_open").return
probe kernel.function("do_sys_open").return
{
  if (filtout_richfs(execname())) next;
  if (filtout_p()) next;
  
  if ($return != -1)
  {
    filename=task_file_handle_d_path(task_current(), $return); #$return is the fd
    if (filename == "") filename = "UNDEFINED";
    printf("%c%d %d %s %d %d\n", 101, pid(), gettimeofday_ms(), filename, $return, $flags);
  }
}

#probe syscall.close
probe kernel.function("sys_close")
{
  if (filtout_richfs(execname())) next;
  if (filtout_p()) next;

  try {
  	
	fr_ts = 0;
	lr_ts = 0;
	fw_ts = 0;
	lw_ts = 0;
	
	# First Read
	if ([pid(), $fd] in firstr){
		fr_ts = firstr[pid(), $fd];
		delete firstr[pid(), $fd];
	}
	# First Write
	if ([pid(), $fd] in firstw) {
		fw_ts = firstw[pid(), $fd];
		delete firstw[pid(), $fd];
	}
	# Last Read
    if ([pid(), $fd] in lastr){
    	lr_ts = lastr[pid(), $fd];
    	delete lastr[pid(), $fd];
    }
	# Last Write
    if ([pid(), $fd] in lastw){
    	lw_ts = lastw[pid(), $fd];
    	delete lastw[pid(), $fd];
    }
    
	printf("%c%d %d %d %d %d %d %d\n", 105, pid(), gettimeofday_ms(), $fd, fr_ts, lr_ts, fw_ts, lw_ts);
    	
  } catch (msg) {
  	printf("%c%d %d %d %d %d %d %d %s\n", 120, pid(), gettimeofday_ms(), $fd, fr_ts, lr_ts, fw_ts, lw_ts, msg);
  }
}

probe syscall.read
{
  if (filtout_richfs(execname())) next;
  if (filtout_p()) next;

  try {
	ts = gettimeofday_ms();
	if (!([pid(), $fd] in firstr))
		firstr[pid(), $fd] = ts;
  } catch (msg) {
    printf("%c%d %d %s\n", 120, pid(), gettimeofday_ms(), msg);
  }
}

#probe vfs.read.return
probe syscall.read.return
{
  if (filtout_richfs(execname())) next;
  if (filtout_p()) next;

  try {
    if ($return > 0) {
      ts = gettimeofday_ms();
      lastr[pid(), $fd] = ts
    }
  } catch (msg) {
    printf("%c%d %d %s\n", 120, pid(), gettimeofday_ms(), msg);
  }
}

probe syscall.write
{
  if (filtout_richfs(execname())) next;
  if (filtout_p()) next;

  try {
	ts = gettimeofday_ms();
	if (!([pid(), $fd] in firstw))
		firstw[pid(), $fd] = ts;
  } catch (msg) {
    printf("%c%d %d %s\n", 120, pid(), gettimeofday_ms(), msg);
  }
}

#probe vfs.write.return
probe syscall.write.return
{
  if (filtout_richfs(execname())) next;
  if (filtout_p()) next;

  try {
    if ($return > 0){
      ts = gettimeofday_ms();
      lastw[pid(), $fd] = ts;
    }
  } catch (msg) {
    printf("%c%d %d %s\n", 120, pid(), gettimeofday_ms(), msg);
  }
}





